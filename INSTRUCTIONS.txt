		    Instructions for using pathsim

== Purpopse ==========================================================

  This repository, pathsim, contains tools to evaluate instruction
cache usage for three different scheduling techniques. Since the focus
is on instruction cache usage the purpose of a task is unimportant and
tasks are generated sequences of control information based on
instruction address. An example can be found in the 'ex' directory,
later instructions will provide a method for generating tasks. 

  The evaluation process the tools were developed for is illustrated
below:

  +-----------+       +-------------+      +------------+
  | Analysis  |       | Generation  |      | Simulation | 
  | (blen.pl) |       | (simgen.pl) |      | (psim.pl)  |
  +-----+-----+       +----------+--+      +---------+--+
        |                ^       |           ^       |
        |                |       |           |       |                
        +-- Parameters --+       +-- Tasks --+       +--- Results -->
  
-- Analysis ----------------------------------------------------------

  Establishing the parameters for task generation is the purpose of
analysis. The parameters are listed below, and their values are
provided by the user/researcher. For the initial research project
using this work, the MRTC benchmarks provided a task set to analyze
and extract parameters from. Any examples can be reproduced using the
benchmarks as a seed.

  block-count:
    The median number of basic blocks per task
  average-block:
    The median number of instructions per basic block
  branch-rate:
    The probability that a single instruction will be a branching one
    [0,1]
  average-branch-distance:
    The median number of instructions between branching statements
  loop-rate:
    The probability that an instruction will be a looping instruction
  max-loop:
    The maximum number of loop iterations assigned to any loop

  To find basic block statistics from the MRTC benchmarks LLVM's clang
and opt tool are used in conjunction with blen.pl in the src
directory. For example, the binary search benchmark the following
commands will produce the provided results, assuming the git checkout
is located at ~/pathsim .

  ~/pathsim > wget \
      http://www.mrtc.mdh.se/projects/wcet/wcet_bench/bs/bs.c
  ~/pathsim > clang -S -emit-llvm bs.c
  ~/pathsim > opt --print-bb bs.ll 2> bs.blocks
  ~/pathsim > src/blen.pl bs.blocks
  Total Instructions      Number of Blocks        Average Block Length
  47                      9                       5.222222

  The script, blen.pl works on one output file at a time. A user
(researcher) needs to compile the results into the block parameters
used in task generation. No other tools are provided for parameter
determination.

-- Generation --------------------------------------------------------

  Creating tasks is handled by simgen.pl, it outputs a single program
with each invocation. Parameters have default values if none are
provided and the task is outputted to standard out.

  Below is an example call using the parameters taken from the MRTC
benchmarks. In our research, this call was made 100 times to make 100
tasks.

  ~/pathsim > src/simgen.pl -c 68 -a 12 -b 0.09 -l 0.045 -i 20 \
      > prog.pp

-- Simulation --------------------------------------------------------

  To simulate a program run, psim.pl consumes a task generated by
simgen.pl and "executes" it. An execution takes a number of threads
and a cache size. Each thread starts is blocked waiting to start
executing the first instruction and is scheduled by one of three
algorithms.

  seq:
    Runs each thread from start to finish with no preepmtions.
  random:
    Runs a thread for a random number of instructions before
    preempting it and selecting another.
  bundle:
    Schedules by cache conflict, when one would be reached the thread
    is halted in favor of another.

  Tasks contain branching structures and loops. The simulator, by
default, randomly choses which path to take. To aid comparison, the
decisions can be pre-generated. 

  Format of the decision file:
  line 1: ([0|1]<space>)+
  line 2: ([1-32678]<space)+

  The first line of the file indicates whether a branch should be
taken: 0 -- don't branch, 1 -- branch. Each decision is taken in order
as the branches are reached. The second line indicates how many loop
iterations a loop will execute. If the number of pre-determined
decisions is fewer than the total needed to complete execution of all
threads random decisions will be taken. If the number of
pre-determined decisions is greater than those needed, the threads
will cease before exhausting the decisions.

  The following shell commands will generate a valid decision file:
  ~/pathsim > shuf -i 0-1 -n 200 -r | tr '\n' ' ' > decisions
  ~/pathsim > echo "" >> decisions
  ~/pathsim > shuf -i 1-40 -n 200 -r | tr '\n' ' ' >> decisions
  ~/pathsim > echo "" >> decisions
		
  Using the generated decision file, two runs of four threads across
the generated program can be compared.

  ~/pathsim > src/psim.pl -l 64 -s seq -p prog.pp=4 -d decisions
  Running 4 threads with a cache size of 64 lines using a sequential scheduler
  Instructions Executed   Context Switches        Cache Conflicts
  32488                   4                       21820
  ~/pathsim > src/psim.pl -l 64 -s bundle -p prog.pp=4 -d decisions
  Running 4 threads with a cache size of 64 lines using the bundle scheduler
  Instructions Executed   Context Switches        Cache Conflicts
  32488                   656                     5455

  Individual runs must be consolidated by the user to create a final
data set. A test pass generating all of the data can be made by
running make in the test directory. Take care, there are 10 generated
tasks and their execution is simulated 75 times for different
configurations of threads, cache sizes, and scheduling algorithm. Even
with parallel execution it will take a while to finish. 

  ~/pathsim > cd test
  ~/pathsim/test > make
  #
  # Go get a cup of coffee ... 
  #
  

  A simple comparison of averages is presented as the product of
running the test (~/pathsim/res/summary.txt). Also within the res
directory are the cumulative results (~/pathsim/test/res/cum-*), the
individual file names reflect the cache, thread, and scheduling
configuration used to generate the data. Additional analysis, such as
generating graphs is left to the user.

  Questions, comments, and corrections may be sent to
corey.tessler@wayne.edu for any of the content found within this
repository. If any of the content is useful in your research or
projects we hope the CC0 license encourages you to do so, please
remember to cite our contributions.
